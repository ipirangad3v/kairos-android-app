name: Android CI - Kairos Multi-Module

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    name: Lint and Test
    if: "!contains(github.event.head_commit.message, 'ci: Bump version')"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Create google-services.json for App Module
        run: echo "${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}" | base64 --decode > app/google-services.json

      - name: Create google-services.json for Wear Module
        run: echo "${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}" | base64 --decode > wear/google-services.json

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run Spotless Check
        run: ./gradlew spotlessCheck

      - name: Run unit tests for Core Module
        run: ./gradlew :core:testDebugUnitTest

      - name: Run unit tests for App Module
        run: ./gradlew :app:testDebugUnitTest

      - name: Run unit tests for Wear Module
        run: ./gradlew :wear:testDebugUnitTest


  deploy:
    name: Build, Sign and Deploy
    if: "!contains(github.event.head_commit.message, 'ci: Bump version')"
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: play-store-release

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}

      - name: Bump version properties
        id: version_bumper
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          NEW_VERSION_CODE=$(($GITHUB_RUN_NUMBER * 2))

          echo "Setting versionCode to $NEW_VERSION_CODE"
          sed -i "s/APP_VERSION_CODE=.*/APP_VERSION_CODE=$NEW_VERSION_CODE/" gradle.properties

          VERSION_NAME=$(grep "APP_VERSION_NAME" gradle.properties | cut -d'=' -f2)
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION_NAME"
          VERSION_PARTS[2]=$((VERSION_PARTS[2] + 1))
          NEW_VERSION_NAME="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.${VERSION_PARTS[2]}"
          echo "Bumping versionName to $NEW_VERSION_NAME"
          sed -i "s/APP_VERSION_NAME=.*/APP_VERSION_NAME=$NEW_VERSION_NAME/" gradle.properties
          echo "version_name=$NEW_VERSION_NAME" >> $GITHUB_OUTPUT
          echo "version_code=$NEW_VERSION_CODE" >> $GITHUB_OUTPUT

          git add gradle.properties
          if ! git diff --staged --quiet; then
            git commit -m "ci: Bump version to $NEW_VERSION_NAME ($NEW_VERSION_CODE)"
            git push
          else
            echo "No version changes to commit."
          fi

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Ruby and install Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.0'
          bundler-cache: true

      - name: Install Fastlane dependencies
        run: |
          bundle install

      - name: Create google-services.json for App Module
        run: echo "${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}" | base64 --decode > app/google-services.json

      - name: Create google-services.json for Wear Module
        run: echo "${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}" | base64 --decode > wear/google-services.json

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run Fastlane Deploy for Phone App
        env:
          PLAY_STORE_SERVICE_ACCOUNT_JSON_PLAINTEXT: ${{ secrets.PLAY_STORE_SERVICE_ACCOUNT_JSON }}
          ANDROID_SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          ANDROID_SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          ANDROID_SIGNING_KEY_ALIAS_PASSWORD: ${{ secrets.SIGNING_KEY_ALIAS_PASSWORD }}
          GOOGLE_SERVICES_JSON_BASE64: ${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_KEY_ALIAS_PASSWORD: ${{ secrets.SIGNING_KEY_ALIAS_PASSWORD }}
          SIGNING_KEY_BASE64: ${{ secrets.SIGNING_KEY_BASE64 }}
        run: |
          bundle exec fastlane deploy_phone \
            version_code:${{ steps.version_bumper.outputs.version_code }} \
            version_name:${{ steps.version_bumper.outputs.version_name }}

          - name: Run Fastlane Deploy for Wear OS App
          env:
          PLAY_STORE_SERVICE_ACCOUNT_JSON_PLAINTEXT: ${{ secrets.PLAY_STORE_SERVICE_ACCOUNT_JSON }}
          ANDROID_SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          ANDROID_SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          ANDROID_SIGNING_KEY_ALIAS_PASSWORD: ${{ secrets.SIGNING_KEY_ALIAS_PASSWORD }}
          GOOGLE_SERVICES_JSON_BASE64: ${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_KEY_ALIAS_PASSWORD: ${{ secrets.SIGNING_KEY_ALIAS_PASSWORD }}
          SIGNING_KEY_BASE64: ${{ secrets.SIGNING_KEY_BASE64 }}
          run: |
          bundle exec fastlane deploy_wear \
            version_code:${{ steps.version_bumper.outputs.version_code }} \
            version_name:${{ steps.version_bumper.outputs.version_name }}

      - name: Create GitHub Tag and Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version_bumper.outputs.version_name }}
          name: Release v${{ steps.version_bumper.outputs.version_name }}
          body: "Release automático da versão ${{ steps.version_bumper.outputs.version_name }} via GitHub Actions para telefone e Wear OS."
